# https://github.com/nginx-with-docker/ngx_http_qrcode_module/blob/main/nginx.conf
load_module modules/ngx_http_qrcode_module.so;
load_module modules/ngx_http_srcache_filter_module.so;
load_module modules/ngx_http_memc_module.so;

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include mime.types;
    default_type  application/octet-stream;
    resolver 127.0.0.11 ipv6=off valid=10s;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    gzip  on;

    upstream memcache_server {
        server memcached:11211;
        keepalive 512;
    }

    server {
        listen 80;
        server_name localhost;

        memc_connect_timeout 100ms;
        memc_send_timeout 100ms;
        memc_read_timeout 100ms;

        location = /favicon.ico {
            access_log off; empty_gif;
        }

        location / {
            set $key $uri$args;
            srcache_fetch GET /memc $key;
            srcache_store PUT /memc $key;
            srcache_store_statuses 200 301 302 307 308;

            proxy_set_header Accept-Encoding "";
            proxy_pass http://localhost/qrcode/;
        }

        location = /memc {
            internal;
            set $memc_key $query_string;
            set $memc_exptime 3600; # 10 mins
            memc_pass memcache_server;
         }


        location /qrcode/ {
            add_header X-Cache-Key $query_string;

            set $fg_color 000000;
            set $bg_color FFFFFF;
            set $level 0;
            set $hint 2;
            set $size 300;
            set $margin 80;
            set $version 2;
            set $case 0;
            set $txt "https://soulteary.com";

            if ( $arg_fg_color ) {
                set $fg_color $arg_fg_color;
            }
            if ( $arg_bg_color ) {
                set $bg_color $arg_bg_color;
            }
            if ( $arg_level ) {
                set $level $arg_level;
            }
            if ( $arg_hint ) {
                set $hint $arg_hint;
            }
            if ( $arg_size ) {
                set $size $arg_size;
            }
            if ( $arg_margin ) {
                set $margin $arg_margin;
            }
            if ( $arg_ver ) {
                set $version $arg_ver;
            }
            if ( $arg_case ) {
                set $case $arg_case;
            }
            if ( $arg_txt ) {
                set $txt $arg_txt;
            }

            qrcode_fg_color $fg_color;
            qrcode_bg_color $bg_color;

            qrcode_level $level;
            qrcode_hint $hint;
            qrcode_size $size;
            qrcode_margin $margin;
            qrcode_version $version;
            qrcode_casesensitive $case;
            qrcode_urlencode_txt $txt;

            qrcode_gen;
        }


    }
}